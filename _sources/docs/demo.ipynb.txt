{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 项目样例"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import signal\n",
    "from pathlib import Path\n",
    "sys.path.extend([Path('../generation').as_posix()])\n",
    "\n",
    "from trainer import Trainer\n",
    "from tools.config import init"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def main(toml_path, opt):\n",
    "    args = init(opt, toml_path, save_name='', seed=3635)\n",
    "    # trainer\n",
    "    trainer = Trainer(args)\n",
    "    if args.evaluation:\n",
    "        trainer.eval()\n",
    "    else:\n",
    "        trainer.train()\n",
    "    return trainer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Namespace(gen_model='g_multivanilla', dis_model='d_vanilla', min_features=32, max_features=32, num_blocks=5, kernel_size=3, padding=0, min_size=25, max_size=250, scale_factor_init=0.75, noise_weight=0.1, batch_size=1, crop_size=0, num_steps=4000, lr=0.0005, gen_betas=[0.5, 0.9], dis_betas=[0.5, 0.9], num_critic=1, step_size=2000, gamma=0.1, penalty_weight=0.1, reconstruction_weight=10.0, adversarial_weight=1.0, print_every=200, eval_every=100, results_dir='./results', evaluation=False, model_to_load='', amps_to_load='', use_tb=False, device='cuda', root='../images/balloons.png', device_ids=[0], seed=3635, save='2022-01-15_01-41-28', save_path='./results')\n",
      "MultiVanilla(\n",
      "  (curr): Vanilla(\n",
      "    (features): Sequential(\n",
      "      (0): BasicBlock(\n",
      "        (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))\n",
      "        (batch_norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)\n",
      "      )\n",
      "      (1): BasicBlock(\n",
      "        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))\n",
      "        (batch_norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)\n",
      "      )\n",
      "      (2): BasicBlock(\n",
      "        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))\n",
      "        (batch_norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)\n",
      "      )\n",
      "      (3): BasicBlock(\n",
      "        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))\n",
      "        (batch_norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)\n",
      "      )\n",
      "    )\n",
      "    (features_to_image): Sequential(\n",
      "      (0): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1))\n",
      "      (1): Tanh()\n",
      "    )\n",
      "  )\n",
      "  (prev): Module()\n",
      ")\n",
      "Vanilla(\n",
      "  (features): Sequential(\n",
      "    (0): BasicBlock(\n",
      "      (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))\n",
      "      (batch_norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)\n",
      "    )\n",
      "    (1): BasicBlock(\n",
      "      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))\n",
      "      (batch_norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)\n",
      "    )\n",
      "    (2): BasicBlock(\n",
      "      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))\n",
      "      (batch_norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)\n",
      "    )\n",
      "    (3): BasicBlock(\n",
      "      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))\n",
      "      (batch_norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)\n",
      "    )\n",
      "  )\n",
      "  (classifier): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1))\n",
      ")\n",
      "Number of parameters in generator: 29763\n",
      "Number of parameters in discriminator: 29185\n",
      "\n",
      "Scale #1\n",
      "Iteration 0, D: 0.068298, D_r: 0.008378, D_f: 0.029563, D_gp: 0.303572, G: 1.88331, G_recon: 0.18590, G_adv: 0.02428\n",
      "C:\\Users\\chaos\\anaconda3\\envs\\torch\\lib\\site-packages\\torch\\optim\\lr_scheduler.py:154: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.\n",
      "  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)\n",
      "Iteration 200, D: -0.678143, D_r: -0.652164, D_f: -0.826018, D_gp: 8.000395, G: 0.85600, G_recon: 0.00662, G_adv: 0.78978\n",
      "Iteration 400, D: -1.658069, D_r: -0.656626, D_f: -1.591637, D_gp: 5.901940, G: 1.80340, G_recon: 0.00776, G_adv: 1.72580\n",
      "Iteration 600, D: -2.207411, D_r: -0.912324, D_f: -1.857137, D_gp: 5.620506, G: 2.00568, G_recon: 0.00871, G_adv: 1.91855\n",
      "Iteration 800, D: -1.707474, D_r: -0.737149, D_f: -1.122354, D_gp: 1.520291, G: 1.38408, G_recon: 0.01297, G_adv: 1.25441\n"
     ]
    }
   ],
   "source": [
    "if __name__ == '__main__':\n",
    "    toml_path = 'opts/main.toml'\n",
    "    opt = {\n",
    "        'device': 'cuda',\n",
    "        'root': '../images/balloons.png',\n",
    "        'device_ids': [0],\n",
    "    }\n",
    "    # enables a ctrl-c without triggering errors\n",
    "    signal.signal(signal.SIGINT, lambda x, y: sys.exit(0))\n",
    "    trainer = main(toml_path, opt)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "77a294554a7bfc2dbdfb574aa3e08cde3791ff8a520b9a7506ee31ed1a8fdb94"
  },
  "kernelspec": {
   "display_name": "Python 3.9.7 64-bit ('torch': conda)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
