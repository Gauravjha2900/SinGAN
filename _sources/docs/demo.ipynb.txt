{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 项目样例"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import signal\n",
    "from pathlib import Path\n",
    "sys.path.extend([Path('../generation').as_posix()])\n",
    "\n",
    "from trainer import Trainer\n",
    "from tools.config import init"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def main(toml_path, opt):\n",
    "    args = init(opt, toml_path, save_name='', seed=3635)\n",
    "    # trainer\n",
    "    trainer = Trainer(args)\n",
    "    if args.evaluation:\n",
    "        trainer.eval()\n",
    "    else:\n",
    "        trainer.train()\n",
    "    return trainer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Namespace(gen_model='g_multivanilla', dis_model='d_vanilla', min_features=32, max_features=32, num_blocks=5, kernel_size=3, padding=0, min_size=25, max_size=250, scale_factor_init=0.75, noise_weight=0.1, batch_size=1, crop_size=0, num_steps=4000, lr=0.0005, gen_betas=[0.5, 0.9], dis_betas=[0.5, 0.9], num_critic=1, step_size=2000, gamma=0.1, penalty_weight=0.1, reconstruction_weight=10.0, adversarial_weight=1.0, print_every=200, eval_every=100, results_dir='./results', evaluation=False, model_to_load='', amps_to_load='', use_tb=False, device='cuda', root='../images/balloons.png', device_ids=[0], seed=3635, save='2022-01-15_01-41-28', save_path='./results')\n",
      "MultiVanilla(\n",
      "  (curr): Vanilla(\n",
      "    (features): Sequential(\n",
      "      (0): BasicBlock(\n",
      "        (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))\n",
      "        (batch_norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)\n",
      "      )\n",
      "      (1): BasicBlock(\n",
      "        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))\n",
      "        (batch_norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)\n",
      "      )\n",
      "      (2): BasicBlock(\n",
      "        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))\n",
      "        (batch_norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)\n",
      "      )\n",
      "      (3): BasicBlock(\n",
      "        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))\n",
      "        (batch_norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)\n",
      "      )\n",
      "    )\n",
      "    (features_to_image): Sequential(\n",
      "      (0): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1))\n",
      "      (1): Tanh()\n",
      "    )\n",
      "  )\n",
      "  (prev): Module()\n",
      ")\n",
      "Vanilla(\n",
      "  (features): Sequential(\n",
      "    (0): BasicBlock(\n",
      "      (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))\n",
      "      (batch_norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)\n",
      "    )\n",
      "    (1): BasicBlock(\n",
      "      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))\n",
      "      (batch_norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)\n",
      "    )\n",
      "    (2): BasicBlock(\n",
      "      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))\n",
      "      (batch_norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)\n",
      "    )\n",
      "    (3): BasicBlock(\n",
      "      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))\n",
      "      (batch_norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)\n",
      "    )\n",
      "  )\n",
      "  (classifier): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1))\n",
      ")\n",
      "Number of parameters in generator: 29763\n",
      "Number of parameters in discriminator: 29185\n",
      "\n",
      "Scale #1\n",
      "Iteration 0, D: 0.068298, D_r: 0.008378, D_f: 0.029563, D_gp: 0.303572, G: 1.88331, G_recon: 0.18590, G_adv: 0.02428\n",
      "C:\\Users\\chaos\\anaconda3\\envs\\torch\\lib\\site-packages\\torch\\optim\\lr_scheduler.py:154: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.\n",
      "  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)\n",
      "Iteration 200, D: -0.678143, D_r: -0.652164, D_f: -0.826018, D_gp: 8.000395, G: 0.85600, G_recon: 0.00662, G_adv: 0.78978\n",
      "Iteration 400, D: -1.658069, D_r: -0.656626, D_f: -1.591637, D_gp: 5.901940, G: 1.80340, G_recon: 0.00776, G_adv: 1.72580\n",
      "Iteration 600, D: -2.207411, D_r: -0.912324, D_f: -1.857137, D_gp: 5.620506, G: 2.00568, G_recon: 0.00871, G_adv: 1.91855\n",
      "Iteration 800, D: -1.707474, D_r: -0.737149, D_f: -1.122354, D_gp: 1.520291, G: 1.38408, G_recon: 0.01297, G_adv: 1.25441\n",
      "Iteration 1000, D: -1.243099, D_r: -0.478408, D_f: -2.012594, D_gp: 12.479028, G: 2.31267, G_recon: 0.00660, G_adv: 2.24667\n",
      "Iteration 1200, D: -1.811601, D_r: -0.410125, D_f: -2.046451, D_gp: 6.449751, G: 2.15485, G_recon: 0.00478, G_adv: 2.10706\n",
      "Iteration 1400, D: -0.850593, D_r: 0.227416, D_f: -2.444138, D_gp: 13.661291, G: 2.50050, G_recon: 0.00430, G_adv: 2.45748\n",
      "Iteration 1600, D: -1.794065, D_r: -0.406599, D_f: -2.072144, D_gp: 6.846771, G: 2.23039, G_recon: 0.00703, G_adv: 2.16005\n",
      "Iteration 1800, D: -1.257632, D_r: -0.725456, D_f: -1.401535, D_gp: 8.693596, G: 1.54986, G_recon: 0.00725, G_adv: 1.47737\n",
      "Iteration 2000, D: -1.497584, D_r: -0.930169, D_f: -1.421547, D_gp: 8.541327, G: 1.52620, G_recon: 0.00403, G_adv: 1.48586\n",
      "Iteration 2200, D: -2.575397, D_r: -1.176368, D_f: -1.916423, D_gp: 5.173935, G: 1.94764, G_recon: 0.00255, G_adv: 1.92217\n",
      "Iteration 2400, D: -1.283952, D_r: -1.190094, D_f: -1.720234, D_gp: 16.263754, G: 1.73951, G_recon: 0.00197, G_adv: 1.71977\n",
      "Iteration 2600, D: -1.877363, D_r: -1.234343, D_f: -1.711417, D_gp: 10.683970, G: 1.72026, G_recon: 0.00179, G_adv: 1.70233\n",
      "Iteration 2800, D: -1.973444, D_r: -1.274468, D_f: -1.630043, D_gp: 9.310667, G: 1.65056, G_recon: 0.00173, G_adv: 1.63323\n",
      "Iteration 3000, D: -1.980394, D_r: -1.060182, D_f: -1.653508, D_gp: 7.332955, G: 1.67371, G_recon: 0.00181, G_adv: 1.65565\n",
      "Iteration 3200, D: -1.575602, D_r: -1.179688, D_f: -1.339411, D_gp: 9.434964, G: 1.35570, G_recon: 0.00175, G_adv: 1.33820\n",
      "Iteration 3400, D: -1.506245, D_r: -1.402051, D_f: -1.363202, D_gp: 12.590090, G: 1.37780, G_recon: 0.00168, G_adv: 1.36096\n",
      "Iteration 3600, D: -1.719652, D_r: -1.410792, D_f: -1.535287, D_gp: 12.264274, G: 1.56233, G_recon: 0.00205, G_adv: 1.54178\n",
      "Iteration 3800, D: -1.386674, D_r: -1.556060, D_f: -1.309927, D_gp: 14.793124, G: 1.33712, G_recon: 0.00182, G_adv: 1.31893\n",
      "Iteration 4000, D: -1.182959, D_r: -1.666069, D_f: -1.101141, D_gp: 15.842505, G: 1.11817, G_recon: 0.00154, G_adv: 1.10280\n",
      "\n",
      "Scale #2\n",
      "Iteration 0, D: 0.654933, D_r: 0.000311, D_f: -0.786137, D_gp: 14.407587, G: 1.74515, G_recon: 0.08686, G_adv: 0.87655\n",
      "Iteration 200, D: -0.517986, D_r: -0.289083, D_f: -0.489821, D_gp: 2.609178, G: 0.57415, G_recon: 0.00663, G_adv: 0.50789\n",
      "Iteration 400, D: -0.431593, D_r: -0.487066, D_f: -0.287624, D_gp: 3.430976, G: 0.35031, G_recon: 0.00477, G_adv: 0.30265\n",
      "Iteration 600, D: -0.535980, D_r: -0.654302, D_f: -0.243143, D_gp: 3.614655, G: 0.27752, G_recon: 0.00399, G_adv: 0.23757\n",
      "Iteration 800, D: -0.370378, D_r: -0.916251, D_f: -0.198318, D_gp: 7.441901, G: 0.43650, G_recon: 0.00436, G_adv: 0.39287\n",
      "Iteration 1000, D: -0.858668, D_r: -0.756070, D_f: -0.279101, D_gp: 1.765030, G: 0.33517, G_recon: 0.00346, G_adv: 0.30059\n",
      "Iteration 1200, D: -1.033465, D_r: -0.997846, D_f: -0.345128, D_gp: 3.095094, G: 0.48587, G_recon: 0.00384, G_adv: 0.44744\n",
      "Iteration 1400, D: -0.788800, D_r: -0.473436, D_f: -0.628431, D_gp: 3.130676, G: 0.64419, G_recon: 0.00395, G_adv: 0.60467\n",
      "Iteration 1600, D: -0.756545, D_r: -0.811329, D_f: -0.185394, D_gp: 2.401784, G: 0.25148, G_recon: 0.00334, G_adv: 0.21806\n",
      "Iteration 1800, D: -0.703822, D_r: -0.810759, D_f: -0.192353, D_gp: 2.992903, G: 0.26943, G_recon: 0.00237, G_adv: 0.24574\n",
      "Iteration 2000, D: -0.866949, D_r: -1.057051, D_f: -0.065547, D_gp: 2.556493, G: 0.13452, G_recon: 0.00318, G_adv: 0.10275\n",
      "Iteration 2200, D: -0.839870, D_r: -0.894047, D_f: -0.380554, D_gp: 4.347306, G: 0.40304, G_recon: 0.00157, G_adv: 0.38738\n",
      "Iteration 2400, D: -1.033937, D_r: -0.898291, D_f: -0.483316, D_gp: 3.476695, G: 0.50040, G_recon: 0.00156, G_adv: 0.48484\n",
      "Iteration 2600, D: -0.722714, D_r: -0.897563, D_f: -0.473073, D_gp: 6.479218, G: 0.49429, G_recon: 0.00147, G_adv: 0.47958\n",
      "Iteration 2800, D: -0.750715, D_r: -0.968905, D_f: -0.337470, D_gp: 5.556601, G: 0.36567, G_recon: 0.00146, G_adv: 0.35105\n",
      "Iteration 3000, D: -0.934819, D_r: -0.830856, D_f: -0.368514, D_gp: 2.645512, G: 0.38782, G_recon: 0.00144, G_adv: 0.37345\n",
      "Iteration 3200, D: -0.606879, D_r: -0.888352, D_f: -0.365419, D_gp: 6.468919, G: 0.37975, G_recon: 0.00148, G_adv: 0.36492\n",
      "Iteration 3400, D: -0.698301, D_r: -0.791428, D_f: -0.425332, D_gp: 5.184588, G: 0.45684, G_recon: 0.00140, G_adv: 0.44286\n",
      "Iteration 3600, D: -0.548536, D_r: -0.803773, D_f: -0.520116, D_gp: 7.753529, G: 0.53321, G_recon: 0.00141, G_adv: 0.51915\n",
      "Iteration 3800, D: -0.997795, D_r: -0.927103, D_f: -0.573966, D_gp: 5.032741, G: 0.59937, G_recon: 0.00134, G_adv: 0.58596\n",
      "Iteration 4000, D: -0.539366, D_r: -0.795945, D_f: -0.683661, D_gp: 9.402400, G: 0.70509, G_recon: 0.00144, G_adv: 0.69072\n",
      "\n",
      "Scale #3\n",
      "Iteration 0, D: 0.282622, D_r: 0.445932, D_f: -0.571687, D_gp: 4.083763, G: 0.89192, G_recon: 0.02315, G_adv: 0.66040\n",
      "Iteration 200, D: -0.260891, D_r: -0.155453, D_f: -0.211440, D_gp: 1.060016, G: 0.32907, G_recon: 0.00472, G_adv: 0.28192\n",
      "Iteration 400, D: -0.498166, D_r: -0.295801, D_f: -0.365447, D_gp: 1.630818, G: 0.42838, G_recon: 0.00490, G_adv: 0.37941\n",
      "Iteration 600, D: -0.221235, D_r: -0.768669, D_f: 0.246162, D_gp: 3.012714, G: -0.15503, G_recon: 0.00337, G_adv: -0.18875\n",
      "Iteration 800, D: -0.006575, D_r: -0.963157, D_f: 0.540075, D_gp: 4.165068, G: -0.35668, G_recon: 0.00303, G_adv: -0.38698\n",
      "Iteration 1000, D: -0.121871, D_r: -0.894179, D_f: 0.410616, D_gp: 3.616921, G: -0.34090, G_recon: 0.00302, G_adv: -0.37113\n",
      "Iteration 1200, D: -0.284937, D_r: -0.898216, D_f: 0.428230, D_gp: 1.850502, G: -0.34474, G_recon: 0.00310, G_adv: -0.37572\n",
      "Iteration 1400, D: -0.371313, D_r: -1.371932, D_f: 0.675811, D_gp: 3.248083, G: -0.63737, G_recon: 0.00264, G_adv: -0.66375\n",
      "Iteration 1600, D: -0.353366, D_r: -1.577660, D_f: 1.122070, D_gp: 1.022238, G: -1.05285, G_recon: 0.00211, G_adv: -1.07395\n",
      "Iteration 1800, D: -0.359091, D_r: -1.610699, D_f: 1.052463, D_gp: 1.991450, G: -0.99942, G_recon: 0.00228, G_adv: -1.02222\n",
      "Iteration 2000, D: -0.361855, D_r: -1.860610, D_f: 1.277493, D_gp: 2.212618, G: -1.24318, G_recon: 0.00247, G_adv: -1.26790\n",
      "Iteration 2200, D: -0.521421, D_r: -1.890857, D_f: 1.182802, D_gp: 1.866339, G: -1.16454, G_recon: 0.00137, G_adv: -1.17825\n",
      "Iteration 2400, D: -0.550705, D_r: -1.965647, D_f: 1.199306, D_gp: 2.156359, G: -1.18477, G_recon: 0.00133, G_adv: -1.19809\n",
      "Iteration 2600, D: -0.429286, D_r: -1.898012, D_f: 1.056641, D_gp: 4.120846, G: -1.03958, G_recon: 0.00143, G_adv: -1.05383\n",
      "Iteration 2800, D: -0.230718, D_r: -1.940700, D_f: 1.335763, D_gp: 3.742190, G: -1.31517, G_recon: 0.00135, G_adv: -1.32868\n",
      "Iteration 3000, D: -0.485385, D_r: -1.881669, D_f: 1.205330, D_gp: 1.909540, G: -1.18575, G_recon: 0.00132, G_adv: -1.19891\n",
      "Iteration 3200, D: -0.244158, D_r: -1.940321, D_f: 1.352174, D_gp: 3.439889, G: -1.33334, G_recon: 0.00131, G_adv: -1.34645\n",
      "Iteration 3400, D: -0.344149, D_r: -1.929144, D_f: 1.370231, D_gp: 2.147645, G: -1.35770, G_recon: 0.00135, G_adv: -1.37115\n",
      "Iteration 3600, D: -0.463112, D_r: -1.969724, D_f: 1.316855, D_gp: 1.897565, G: -1.29715, G_recon: 0.00128, G_adv: -1.30997\n",
      "Iteration 3800, D: -0.614109, D_r: -1.963599, D_f: 1.183594, D_gp: 1.658958, G: -1.17297, G_recon: 0.00130, G_adv: -1.18596\n",
      "Iteration 4000, D: -0.460167, D_r: -2.090730, D_f: 1.420738, D_gp: 2.098243, G: -1.41002, G_recon: 0.00131, G_adv: -1.42316\n",
      "\n",
      "Scale #4\n",
      "Iteration 0, D: 0.003759, D_r: -1.392251, D_f: 1.199934, D_gp: 1.960770, G: -0.94116, G_recon: 0.02403, G_adv: -1.18149\n",
      "Iteration 200, D: -0.141172, D_r: -1.088830, D_f: 0.904641, D_gp: 0.430170, G: -0.82791, G_recon: 0.00379, G_adv: -0.86583\n",
      "Iteration 400, D: -0.072693, D_r: -1.072400, D_f: 0.922342, D_gp: 0.773642, G: -0.85366, G_recon: 0.00381, G_adv: -0.89178\n",
      "Iteration 600, D: -0.085055, D_r: -1.313883, D_f: 1.037334, D_gp: 1.914934, G: -0.89979, G_recon: 0.00264, G_adv: -0.92624\n",
      "Iteration 800, D: -0.194352, D_r: -1.487765, D_f: 1.210491, D_gp: 0.829218, G: -1.19417, G_recon: 0.00256, G_adv: -1.21981\n",
      "Iteration 1000, D: -0.315485, D_r: -1.786535, D_f: 1.354048, D_gp: 1.170024, G: -1.26958, G_recon: 0.00248, G_adv: -1.29442\n",
      "Iteration 1200, D: -0.199558, D_r: -1.657499, D_f: 1.278720, D_gp: 1.792208, G: -1.19977, G_recon: 0.00268, G_adv: -1.22657\n",
      "Iteration 1400, D: -0.223108, D_r: -1.887248, D_f: 1.565615, D_gp: 0.985255, G: -1.53121, G_recon: 0.00215, G_adv: -1.55272\n",
      "Iteration 1600, D: -0.269330, D_r: -1.726939, D_f: 1.337948, D_gp: 1.196614, G: -1.30070, G_recon: 0.00195, G_adv: -1.32016\n",
      "Iteration 1800, D: -0.155926, D_r: -1.734129, D_f: 1.423717, D_gp: 1.544860, G: -1.32739, G_recon: 0.00215, G_adv: -1.34891\n",
      "Iteration 2000, D: -0.236646, D_r: -1.951918, D_f: 1.463826, D_gp: 2.514460, G: -1.45692, G_recon: 0.00239, G_adv: -1.48081\n",
      "Iteration 2200, D: -0.170126, D_r: -2.062118, D_f: 1.639930, D_gp: 2.520615, G: -1.61886, G_recon: 0.00145, G_adv: -1.63331\n",
      "Iteration 2400, D: -0.424038, D_r: -2.094898, D_f: 1.557582, D_gp: 1.132771, G: -1.53657, G_recon: 0.00146, G_adv: -1.55114\n",
      "Iteration 2600, D: -0.329843, D_r: -2.001073, D_f: 1.558228, D_gp: 1.130021, G: -1.53178, G_recon: 0.00146, G_adv: -1.54635\n",
      "Iteration 2800, D: -0.348306, D_r: -2.000179, D_f: 1.538133, D_gp: 1.137399, G: -1.51715, G_recon: 0.00140, G_adv: -1.53114\n",
      "Iteration 3000, D: -0.215792, D_r: -2.037984, D_f: 1.701533, D_gp: 1.206591, G: -1.69168, G_recon: 0.00143, G_adv: -1.70602\n",
      "Iteration 3200, D: -0.463576, D_r: -2.086456, D_f: 1.532148, D_gp: 0.907319, G: -1.51004, G_recon: 0.00146, G_adv: -1.52463\n",
      "Iteration 3400, D: -0.279814, D_r: -2.072014, D_f: 1.547311, D_gp: 2.448883, G: -1.52164, G_recon: 0.00141, G_adv: -1.53572\n"
     ]
    }
   ],
   "source": [
    "if __name__ == '__main__':\n",
    "    toml_path = 'opts/main.toml'\n",
    "    opt = {\n",
    "        'device': 'cuda',\n",
    "        'root': '../images/balloons.png',\n",
    "        'device_ids': [0],\n",
    "    }\n",
    "    # enables a ctrl-c without triggering errors\n",
    "    signal.signal(signal.SIGINT, lambda x, y: sys.exit(0))\n",
    "    trainer = main(toml_path, opt)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "77a294554a7bfc2dbdfb574aa3e08cde3791ff8a520b9a7506ee31ed1a8fdb94"
  },
  "kernelspec": {
   "display_name": "Python 3.9.7 64-bit ('torch': conda)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
